{
  "name": "electron-connect",
  "version": "0.4.2",
  "description": "Livereload tools for Electron development",
  "main": "index.js",
  "scripts": {
    "test": "gulp test"
  },
  "keywords": [
    "electron",
    "livereload",
    "gulp"
  ],
  "homepage": "https://github.com/Quramy/electron-connect",
  "repository": {
    "type": "git",
    "url": "https://github.com/Quramy/electron-connect.git"
  },
  "author": {
    "name": "Quramy",
    "email": "yosuke.kurami@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "cross-spawn": "^2.2.3",
    "lodash": "^4.11.1",
    "tree-kill": "^1.0.0",
    "ws": "^1.1.0"
  },
  "devDependencies": {
    "electron-prebuilt": "^1.0.0",
    "gulp": "^3.9.1",
    "gulp-mocha": "^2.2.0",
    "spectron": "^3.0.0"
  },
  "readme": "# electron-connect [![Build Status](https://travis-ci.org/Quramy/electron-connect.svg?branch=master)](https://travis-ci.org/Quramy/electron-connect) [![npm version](https://badge.fury.io/js/electron-connect.svg)](http://badge.fury.io/js/electron-connect) ![dependency](https://david-dm.org/quramy/electron-connect.svg)\nUtility tool to develop applications with [Electron](http://electron.atom.io/).\n\nUsing this in your Node.js scripts(e.g. `gulpfile.js`), you can livereload your Electron app.\n\nIt provides the following features:\n\n* start(and restart) Electron process in your Node.js script\n* reload renderer process in your Node.js script\n\n## Install\nUse npm:\n\n```bash\nnpm install -g electron-prebuilt\nnpm install electron-connect\n```\n\n## Usage\n`electron-connect` has server and client components. They communicate with each other using WebSocket.\nThe server component manages Electron process and broadcasts reload event to client, and client components reload renderer's resources.\n\n### Server\nHere is an example creating a server in [gulpfile](http://gulpjs.com/).\n\n```js\n'use strict';\n\nvar gulp = require('gulp');\nvar electron = require('electron-connect').server.create();\n\ngulp.task('serve', function () {\n\n  // Start browser process\n  electron.start();\n\n  // Restart browser process\n  gulp.watch('app.js', electron.restart);\n\n  // Reload renderer process\n  gulp.watch(['index.js', 'index.html'], electron.reload);\n});\n```\n\n### Client\nA client can be created in browser process or renderer process.\n\n* RendererProcess\n```html\n<html>\n<body>\n<!-- build:remove -->\n<!-- Connect to server process -->\n<script>require('electron-connect').client.create()</script>\n<!-- end:build -->\n</body>\n</html>\n```\n\nDo you want to use this tool for only develop environment ?\nYou can remove the `<script>` block in your gulpfile using [gulp-useref](https://www.npmjs.com/package/gulp-useref#usage).\n\n* BrowserProcess \n\n```js\n'use strict';\n\nvar app = require('app');\nvar BrowserWindow = require('browser-window');\nvar client = require('electron-connect').client;\n\napp.on('ready', function () {\n  var mainWindow = new BrowserWindow({\n    width: 400,\n    height: 300\n  });\n  mainWindow.loadUrl('file://' + __dirname + '/index.html');\n\n  // Connect to server process\n  client.create(mainWindow);\n});\n```\n\nIf you want details, see [example/simple](example/simple).\n\n## API References\n\n## server.create([options])\n\n* `option` Object\n * `electron` Object. An `electron-prebuilt` module. Set it If you want to use your forked Electron.\n * `useGlobalElectron` Boolean. If set, electron-connect use `electron-prebuilt` installed globally(default: `false`).\n * `path` String. A path to your `package.json` file(default: `process.cwd()`).\n * `port` Number. WebSocket server port(default: `30080`).\n * `spawnOpt` Object. Options for [spawn](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options).\n * `verbose` Boolean. If set, show all electron-connect log in your prompt(default: `false`).\n\nReturns a new `ProcessManager` object.\n\nIf neither `electron` nor `useGlobalElectron` are set, electron-connect searches `electron-prebuilt` modules automatically.\n\n1. First, electron-connect searches `electron-prebuilt` installed locally.\n1. If not hit, electron-connect uses `electron-prebuilt` installed globally.\n\n## Class: ProcessManager\n\n### start([args], [callback])\n\n* `args` String or Array. Additional arguments used when create a process.\n* `callback` Function\n\nStarts a server and Electron application process.\n\n### restart([args], [callback])\n\n* `args` String or Array. Additional arguments used when create a process.\n* `callback` Function\n\nKills Electron process if it exsists, and starts new one.\n\nThis method is useful for callback of your browserProcess sourcecodes' change event.\n\n### reload([ids])\n\n* `ids` String or Array. A list of id of target client.\n\nEmit reload event to target clients. Broadcasts reload event to all connected `Client` object if `ids` not set.\nThis method does not kill any Electron processes.\n\nThis method is useful for callback of your rendererProcess sourcecodes' change event.\n\n### stop([callback])\n\n* `callback` Function\n\nKills Electron process and stops server.\n\n### on(eventName, callback)\n\n* `eventName` String\n* `callback` Function\n\nRegisters an eventhandler. It can be emitted by `Client.sendMessage`.\n\n### broadcast(eventName, [data])\n\n* `eventName` String. A message type.\n* `data` Object. A message data.\n\nBroadcasts a event to all clients.\n\n## client.create([browserWindow], [options], [callback])\n\n* `browserWindow` Object\n* `options` Object\n * `port` Number\n * `sendBounds` Boolean\n * `verbose` Boolean\n* `callback` Function\n\nCreates a new `Client` object with `browserWindow` and connects to `ProcessManager`. The `browserWindow` should be an Electron [browser-window](https://github.com/atom/electron/blob/master/docs/api/browser-window.md) instance.\nOnce a client is created and connects the server, the client can receive events(e.g. reload).\nYou can omit `browserWindow` in only rendererProcess.\n\nIf `sendBounds` is set(default `true`), the client sends a bounds object when `browserWindow` moves or resizes.\nAnd when `ProcessManager.restart()` is called, the client recover the bounds stored at server.\n\n## class: Client\n\n### id\n\nAn identifier of this client. It is a same value `browserWindow.id`.\n\n### on(eventName, callback)\n\n* `eventName` String\n* `callback` Function\n\nRegisters an eventhandler. It can be emitted by `ProcessManager.broadcast`.\n\n### sendMessage(eventName, [data])\n\n* `eventName` String. A message type.\n* `data` Object. A message data.\n\nEmits an event to `ProcessManager`.\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Quramy/electron-connect/issues"
  },
  "_id": "electron-connect@0.4.2",
  "dist": {
    "shasum": "ef710ceef39573cdd27b5380998fa37d060ec70e"
  },
  "_from": "electron-connect@^0.4.2",
  "_resolved": "https://registry.npmjs.org/electron-connect/-/electron-connect-0.4.2.tgz"
}
